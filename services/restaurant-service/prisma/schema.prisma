generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  restaurant_id     String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_name   String           @db.VarChar(100)
  restaurant_address String
  restaurant_phone  String?          @db.VarChar(20)
  restaurant_email  String?          @db.VarChar(100)
  latitude          Decimal          @db.Decimal(9, 6)
  longitude         Decimal          @db.Decimal(9, 6)
  opening_hours     String?
  created_at        DateTime?        @default(now()) @db.Timestamp(6)
  owner_id          String           @db.Uuid
  rating            Decimal?         @default(0.0) @db.Decimal(2, 1)

  categories        Category[]
  restaurant_type   RestaurantType[] @relation("RestaurantTypes")
  ingredients       Ingredient[]     // âœ… Champ inverse ici
}

model RestaurantType {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @unique
  restaurants Restaurant[] @relation("RestaurantTypes")
}

model Category {
  category_id   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id String     @db.Uuid
  name          String     @db.VarChar(100)

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade)
  articles      Article[]  @relation("ArticleCategories")
}

model Article {
  article_id     String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String              @db.VarChar(100)
  desc           String?
  price          Decimal             @db.Decimal(5, 2)

  categories     Category[]          @relation("ArticleCategories")
  ingredients    ArticleIngredient[]
}

model Ingredient {
  ingredient_id  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String      @db.VarChar(100)
  restaurant_id  String      @db.Uuid

  restaurant     Restaurant  @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade)
  articles       ArticleIngredient[]
}

model ArticleIngredient {
  article_id     String
  ingredient_id  String
  is_optional    Boolean?    @default(false)
  extra_price    Decimal?    @default(0.00) @db.Decimal(5, 2)

  article        Article     @relation(fields: [article_id], references: [article_id], onDelete: Cascade)
  ingredient     Ingredient  @relation(fields: [ingredient_id], references: [ingredient_id], onDelete: Cascade)

  @@id([article_id, ingredient_id])
}
