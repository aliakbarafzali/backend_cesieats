generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  @@map("restaurant")
  restaurant_id     String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_name   String           @db.VarChar(100)
  restaurant_address String
  restaurant_phone  String?          @db.VarChar(20)
  restaurant_email  String?          @db.VarChar(100)
  latitude          Decimal          @db.Decimal(9, 6)
  longitude         Decimal          @db.Decimal(9, 6)
  opening_hours     String?
  created_at        DateTime?        @default(now()) @db.Timestamp(6)
  owner_id          String           @db.Uuid
  rating            Decimal?         @default(0.0) @db.Decimal(2, 1)

  categories         Category[]
  dishes             Dish[]
  restaurant_type    RestaurantType[] @relation("RestaurantTypes")
}

model RestaurantType {
  id          String       @id @default(uuid())
  name        String       @unique
  restaurants Restaurant[] @relation("RestaurantTypes")
}

model Category {
  category_id   Int       @id @default(autoincrement())
  restaurant_id String?   @db.Uuid
  name          String    @db.VarChar(100)

  restaurant    Restaurant? @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade, onUpdate: NoAction)
  dishes        Dish[]
}

model Dish {
  dish_id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id    String?         @db.Uuid
  name             String          @db.VarChar(100)
  description      String?
  price            Decimal         @db.Decimal(5, 2)
  category_id      Int?

  category         Category?       @relation(fields: [category_id], references: [category_id], onUpdate: NoAction)
  restaurant       Restaurant?     @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade, onUpdate: NoAction)
  ingredients      DishIngredient[]
}

model Ingredient {
  ingredient_id    String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String          @db.VarChar(100)

  dishes           DishIngredient[]
}

model DishIngredient {
  dish_id       String      @db.Uuid
  ingredient_id String      @db.Uuid
  is_optional   Boolean?    @default(false)
  extra_price   Decimal?    @default(0.00) @db.Decimal(5, 2)

  dish          Dish        @relation(fields: [dish_id], references: [dish_id], onDelete: Cascade, onUpdate: NoAction)
  ingredient    Ingredient  @relation(fields: [ingredient_id], references: [ingredient_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([dish_id, ingredient_id])
}