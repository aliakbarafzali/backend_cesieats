generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  restaurant_id     String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_name   String           @db.VarChar(100)
  restaurant_phone  String?          @db.VarChar(20)
  restaurant_email  String?          @db.VarChar(100)
  image_url         String?          @db.VarChar(255)
  banner_image_url  String?          @db.VarChar(255)
  openingHours      OpeningHours?
  created_at        DateTime         @default(now())
  owner_id          String           @db.Uuid
  rating            Float?           @default(0.0)
  offers_available  Boolean          @default(false)
  address_id        Int
  updated_at        DateTime         @updatedAt

  address           Address          @relation(fields: [address_id], references: [id], onDelete: NoAction)
  categories        Category[]
  restaurant_type   RestaurantType[] @relation("RestaurantTypes")
  articles          Article[]
  reviews           Review[]
  reviews_count     Int              @default(0)

  @@index([restaurant_name])
  @@index([owner_id])
  @@index([address_id])
}

model OpeningHours {
  id        Int      @id @default(autoincrement())
  monday    String   @db.VarChar(20)
  tuesday   String   @db.VarChar(20)
  wednesday String   @db.VarChar(20)
  thursday  String   @db.VarChar(20)
  friday    String   @db.VarChar(20)
  saturday  String   @db.VarChar(20)
  sunday    String   @db.VarChar(20)
  // La relation optionnelle vers Restaurant (1:1)
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [restaurant_id], onDelete: Cascade)
  restaurantId String?     @unique @db.Uuid
}

model RestaurantType {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String       @unique
  restaurants Restaurant[] @relation("RestaurantTypes")
}

model Category {
  category_id   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id String     @db.Uuid
  name          String     @db.VarChar(100)

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade)
  articles      Article[]

  @@index([name])
  @@index([restaurant_id])
}

model Article {
  article_id       String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String      @db.VarChar(100)
  desc             String?
  price            Float
  image            String?     @db.VarChar(255)
  available        Boolean     @default(true)
  
  // Champs pour les offres
  has_offer        Boolean     @default(false)
  offer_type       String?     @db.VarChar(20)  // "FREE_PRODUCT", "DISCOUNT", "2FOR1"
  discount_percent Float?
  free_product_id  String?     @db.Uuid  // ID du produit gratuit si FREE_PRODUCT

  categories       Category[]
  ingredients      ArticleIngredient[]
  supplements      Supplement[]
  options          Option[]   // Relation optionnelle avec les options
  restaurant_id    String      @db.Uuid
  restaurant       Restaurant  @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade)
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt

  @@index([name])
  @@index([restaurant_id])
  @@index([available])
}

model ArticleIngredient {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  article_id String   @db.Uuid
  name       String   @db.VarChar(100)
  removable  Boolean  @default(true)

  article    Article  @relation(fields: [article_id], references: [article_id], onDelete: Cascade)

  @@index([article_id])
}

model Supplement {
  supplement_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  article_id    String   @db.Uuid
  name          String   @db.VarChar(100)
  is_optional   Boolean  @default(false)
  extra_price   Float    @default(0.00)

  article       Article  @relation(fields: [article_id], references: [article_id], onDelete: Cascade)

  @@index([article_id])
}

model Option {
  option_id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  article_id    String   @db.Uuid
  name          String   @db.VarChar(100)  // Nom de l'option (ex: "Goût", "Taille")
  value         String   @db.VarChar(100)  // Valeur de l'option (ex: "Vanille", "Chocolat")
  extra_price   Float?   @default(0.00)    // Prix supplémentaire si applicable
  is_default    Boolean  @default(false)   // Si c'est l'option par défaut

  article       Article  @relation(fields: [article_id], references: [article_id], onDelete: Cascade)

  @@index([article_id])
  @@index([name])
}

model Address {
  id         Int         @id @default(autoincrement())
  place_id   String?     @unique
  street     String      @db.VarChar(100)
  city       String      @db.VarChar(100)
  postcode   String      @db.VarChar(20)
  country    String      @db.VarChar(100)
  lat        String      @db.VarChar(100)
  lon        String      @db.VarChar(100)
  restaurants Restaurant[]

  @@index([place_id])
  @@index([city])
}

model Review {
  id            Int       @id @default(autoincrement())
  rating        Int       @db.SmallInt
  comment       String?   @db.Text
  user_id       String    @db.Uuid
  restaurant_id String    @db.Uuid
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade)

  @@index([restaurant_id])
  @@index([user_id])
  @@index([rating])
}
