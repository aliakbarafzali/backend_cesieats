import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

// ‚ûï Cr√©er un ingr√©dient
export const createIngredient = async (req, res) => {
  try {
    const { name, restaurant_id } = req.body;

    if (!name || !restaurant_id) {
      return res.status(400).json({ error: 'Nom et restaurant_id sont requis.' });
    }

    // V√©rifie que le restaurant existe
    const restaurant = await prisma.restaurant.findUnique({
      where: { restaurant_id },
    });

    if (!restaurant) {
      return res.status(404).json({ error: 'Restaurant introuvable.' });
    }

    const ingredient = await prisma.ingredient.create({
      data: {
        name,
        restaurant_id,
      },
    });

    res.status(201).json(ingredient);
  } catch (error) {
    console.error('Erreur dans createIngredient:', error);
    res.status(500).json({ error: 'Erreur serveur lors de la cr√©ation.' });
  }
};

// üìÑ Liste tous les ingr√©dients
export const getAllIngredients = async (req, res) => {
  try {
    const ingredients = await prisma.ingredient.findMany({
      include: { restaurant: true },
    });
    res.json(ingredients);
  } catch (error) {
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des ingr√©dients.' });
  }
};

// üîç Obtenir un ingr√©dient par ID
export const getIngredientById = async (req, res) => {
  const { id } = req.params;
  try {
    const ingredient = await prisma.ingredient.findUnique({
      where: { ingredient_id: id },
      include: { restaurant: true },
    });

    if (!ingredient) {
      return res.status(404).json({ error: 'Ingr√©dient non trouv√©.' });
    }

    res.json(ingredient);
  } catch (error) {
    res.status(500).json({ error: 'Erreur serveur.' });
  }
};

// ‚úèÔ∏è Mettre √† jour un ingr√©dient
export const updateIngredient = async (req, res) => {
  const { id } = req.params;
  const { name } = req.body;

  try {
    const ingredient = await prisma.ingredient.update({
      where: { ingredient_id: id },
      data: { name },
    });

    res.json(ingredient);
  } catch (error) {
    res.status(500).json({ error: 'Erreur lors de la mise √† jour.' });
  }
};

// ‚ùå Supprimer un ingr√©dient
export const deleteIngredient = async (req, res) => {
  const { id } = req.params;

  try {
    await prisma.ingredient.delete({
      where: { ingredient_id: id },
    });

    res.json({ message: 'Ingr√©dient supprim√©.' });
  } catch (error) {
    res.status(500).json({ error: 'Erreur lors de la suppression.' });
  }
};
